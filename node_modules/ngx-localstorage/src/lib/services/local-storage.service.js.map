{"version":3,"sources":["local-storage.service.ts"],"names":[],"mappings":"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","file":"local-storage.service.js","sourceRoot":"","sourcesContent":["/**\r\n * Created by bohoffi on 03.04.2017.\r\n */\r\nimport {Injectable, Optional} from '@angular/core';\r\nimport {ModuleConfig} from '../interfaces';\r\nimport {PromisableService} from './promisable.service';\r\nimport {defaultConfig} from '../utils';\r\n\r\n\r\nexport class LocalStorageService {\r\n\r\n    private _prefix: string;\r\n    private _allowNull: boolean;\r\n\r\n    private _promisable: PromisableService;\r\n\r\n    constructor( config?: ModuleConfig) {\r\n        if (config) {\r\n            this._prefix = config.prefix || defaultConfig.prefix;\r\n            this._allowNull = config.allowNull || defaultConfig.allowNull;\r\n        }\r\n        this._promisable = new PromisableService({\r\n            allowNull: this._allowNull,\r\n            prefix: this._prefix\r\n        });\r\n    }\r\n\r\n    asPromisable(): PromisableService {\r\n        return this._promisable;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of entries in the applications local storage.\r\n     * @returns {Promise<number>}\r\n     */\r\n    count(): number | undefined {\r\n        try {\r\n            return localStorage.length;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the nth (defined by the index parameter) key in the storage.\r\n     * The order of keys is user-agent defined, so you should not rely on it.\r\n     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.\r\n     * @returns {Promise<string | null>}\r\n     */\r\n    getKey(index: number): string | null | undefined {\r\n        if (index < 0) {\r\n            console.error(new Error('index has to be 0 or greater'));\r\n        }\r\n        try {\r\n            return localStorage.key(index);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds tha value with the given key or updates an existing entry.\r\n     * @param key     Key to store.\r\n     * @param value   Value to store.\r\n     * @param prefix  Optional prefix to overwrite the configured one.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    set(key: string, value: string, prefix?: string): void {\r\n        if (this._allowNull\r\n            || (!this._allowNull && value !== 'null' && value !== null && value !== undefined)) {\r\n            localStorage.setItem(`${prefix || this._prefix}_${key}`, value);\r\n        } else {\r\n            this.remove(key, prefix);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the entry specified by the given key or null.\r\n     * @param key     Key identifying the wanted entry.\r\n     * @param prefix  Optional prefix to overwrite the configured one.\r\n     * @returns {Promise<string | null>}\r\n     */\r\n    get(key: string, prefix?: string): string | null | undefined {\r\n        try {\r\n            return localStorage.getItem(`${prefix || this._prefix}_${key}`);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the entry specified by the given key.\r\n     * @param key     Key identifying the entry to remove.\r\n     * @param prefix  Optional prefix to overwrite the configured one.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    remove(key: string, prefix?: string): void {\r\n        try {\r\n            localStorage.removeItem(`${prefix || this._prefix}_${key}`);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all entries of the applications local storage.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    clear(): void {\r\n        try {\r\n            localStorage.clear();\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, ]},\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
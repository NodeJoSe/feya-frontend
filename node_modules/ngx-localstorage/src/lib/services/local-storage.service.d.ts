import { ModuleConfig } from '../interfaces';
import { PromisableService } from './promisable.service';
export declare class LocalStorageService {
    private _prefix;
    private _allowNull;
    private _promisable;
    constructor(config?: ModuleConfig);
    asPromisable(): PromisableService;
    /**
     * Gets the number of entries in the applications local storage.
     * @returns {Promise<number>}
     */
    count(): number | undefined;
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     * @returns {Promise<string | null>}
     */
    getKey(index: number): string | null | undefined;
    /**
     * Adds tha value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @returns {Promise<boolean>}
     */
    set(key: string, value: string, prefix?: string): void;
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @returns {Promise<string | null>}
     */
    get(key: string, prefix?: string): string | null | undefined;
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @returns {Promise<boolean>}
     */
    remove(key: string, prefix?: string): void;
    /**
     * Clears all entries of the applications local storage.
     * @returns {Promise<boolean>}
     */
    clear(): void;
}

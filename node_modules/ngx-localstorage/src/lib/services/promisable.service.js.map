{"version":3,"sources":["promisable.service.ts"],"names":[],"mappings":"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","file":"promisable.service.js","sourceRoot":"","sourcesContent":["/**\r\n * Created by HOFFM59 on 22.05.2017.\r\n */\r\nimport {ModuleConfig} from '../interfaces';\r\n\r\nexport class PromisableService {\r\n\r\n    private _prefix = 'ngx_local_storage';\r\n    private _allowNull = true;\r\n\r\n    constructor(config?: ModuleConfig) {\r\n        if (config) {\r\n            this._prefix = config.prefix || this._prefix;\r\n            this._allowNull = config.allowNull || this._allowNull;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the number of entries in the applications local storage.\r\n     * @returns {Promise<number>}\r\n     */\r\n    count(): Promise<number> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                resolve(localStorage.length);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the nth (defined by the index parameter) key in the storage.\r\n     * The order of keys is user-agent defined, so you should not rely on it.\r\n     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.\r\n     * @returns {Promise<string | null>}\r\n     */\r\n    getKey(index: number): Promise<string | null> {\r\n        return new Promise<string | null>((resolve, reject) => {\r\n            if (index < 0) {\r\n                reject(new Error('index has to be 0 or greater'));\r\n            }\r\n            try {\r\n                resolve(localStorage.key(index));\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds tha value with the given key or updates an existing entry.\r\n     * @param key     Key to store.\r\n     * @param value   Value to store.\r\n     * @param prefix  Optional prefix to overwrite the configured one.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    set(key: string, value: string, prefix?: string): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (this._allowNull\r\n                    || (!this._allowNull && value !== 'null' && value !== null && value !== undefined)) {\r\n                    localStorage.setItem(`${prefix || this._prefix}_${key}`, value);\r\n                } else {\r\n                    return this.remove(key, prefix);\r\n                }\r\n                resolve(true);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the entry specified by the given key or null.\r\n     * @param key     Key identifying the wanted entry.\r\n     * @param prefix  Optional prefix to overwrite the configured one.\r\n     * @returns {Promise<string | null>}\r\n     */\r\n    get(key: string, prefix?: string): Promise<string | null> {\r\n        return new Promise<string | null>((resolve, reject) => {\r\n            try {\r\n                resolve(localStorage.getItem(`${prefix || this._prefix}_${key}`));\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes the entry specified by the given key.\r\n     * @param key     Key identifying the entry to remove.\r\n     * @param prefix  Optional prefix to overwrite the configured one.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    remove(key: string, prefix?: string): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                localStorage.removeItem(`${prefix || this._prefix}_${key}`);\r\n                resolve(true);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears all entries of the applications local storage.\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    clear(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                localStorage.clear();\r\n                resolve(true);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}
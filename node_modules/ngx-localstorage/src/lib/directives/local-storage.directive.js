/**
 * Created by bohoffi on 03.04.2017.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/operator/debounceTime';
import { LocalStorageService } from '../services/index';
import { getProperty, setProperty } from '../utils';
var LocalStorageDirective = (function () {
    function LocalStorageDirective(_element, _service) {
        this._element = _element;
        this._service = _service;
        this.lsDebounce = 0;
        this.lsInitFromStorage = false;
        this.lsStoredValue = new EventEmitter();
        this._valuePath = [];
    }
    LocalStorageDirective.prototype.ngAfterViewInit = function () {
        this._initKey();
        this._initFromStorage();
        this._hookEvent();
    };
    Object.defineProperty(LocalStorageDirective.prototype, "lsValuePath", {
        set: function (path) {
            if (path != null) {
                this._valuePath = Array.isArray(path) ? path : path.split(',');
            }
            else {
                this._valuePath = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    LocalStorageDirective.prototype._initKey = function () {
        if (!this.lsKey) {
            if (!this._element.nativeElement.id && !this._element.nativeElement.name) {
                throw new Error('No key or element id or name supplied!');
            }
            this.lsKey = this._element.nativeElement.id || this._element.nativeElement.name;
        }
    };
    LocalStorageDirective.prototype._hookEvent = function () {
        var _this = this;
        if (this.lsEvent) {
            this._eventSubscription = Observable.fromEvent(this._element.nativeElement, this.lsEvent)
                .debounceTime(this.lsDebounce)
                .subscribe(function () {
                _this._service.asPromisable().set(_this.lsKey, getProperty(_this._valuePath.length ? _this._valuePath : ['value'], _this._element.nativeElement), _this.lsPrefix)
                    .then(function () {
                    _this._service.asPromisable().get(_this.lsKey, _this.lsPrefix)
                        .then(function (value) {
                        _this.lsStoredValue.emit(value);
                    })
                        .catch(function (err) { return console.error(err); });
                })
                    .catch(function (err) { return console.error(err); });
            });
        }
    };
    LocalStorageDirective.prototype._initFromStorage = function () {
        var _this = this;
        if (this.lsInitFromStorage) {
            this._service.asPromisable().get(this.lsKey, this.lsPrefix)
                .then(function (storedValue) {
                if (!!storedValue && typeof storedValue === 'string' && storedValue !== 'null') {
                    setProperty(_this._valuePath.length ? _this._valuePath : ['value'], storedValue, _this._element.nativeElement);
                }
            })
                .catch(function (err) { return console.error(err); });
        }
    };
    LocalStorageDirective.prototype.ngOnDestroy = function () {
        if (this._eventSubscription && !this._eventSubscription.closed) {
            this._eventSubscription.unsubscribe();
        }
    };
    return LocalStorageDirective;
}());
export { LocalStorageDirective };
LocalStorageDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxLocalStorage]'
            },] },
];
/** @nocollapse */
LocalStorageDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: LocalStorageService, },
]; };
LocalStorageDirective.propDecorators = {
    'lsKey': [{ type: Input, args: ['ngxLocalStorage',] },],
    'lsPrefix': [{ type: Input },],
    'lsEvent': [{ type: Input },],
    'lsDebounce': [{ type: Input },],
    'lsInitFromStorage': [{ type: Input },],
    'lsStoredValue': [{ type: Output },],
    'lsValuePath': [{ type: Input },],
};
//# sourceMappingURL=local-storage.directive.js.map
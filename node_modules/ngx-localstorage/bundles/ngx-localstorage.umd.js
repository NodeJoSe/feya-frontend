(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs/Observable'), require('rxjs/add/observable/fromEvent'), require('rxjs/add/operator/debounceTime')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs/Observable', 'rxjs/add/observable/fromEvent', 'rxjs/add/operator/debounceTime'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.localstorage = global.ng.localstorage || {}),global.ng.core,global.ng.common,global.Rx));
}(this, (function (exports,_angular_core,_angular_common,rxjs_Observable) { 'use strict';

var PromisableService = (function () {
    function PromisableService(config) {
        this._prefix = 'ngx_local_storage';
        this._allowNull = true;
        if (config) {
            this._prefix = config.prefix || this._prefix;
            this._allowNull = config.allowNull || this._allowNull;
        }
    }
    /**
     * Gets the number of entries in the applications local storage.
     * @returns {Promise<number>}
     */
    PromisableService.prototype.count = function () {
        return new Promise(function (resolve, reject) {
            try {
                resolve(localStorage.length);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     * @returns {Promise<string | null>}
     */
    PromisableService.prototype.getKey = function (index) {
        return new Promise(function (resolve, reject) {
            if (index < 0) {
                reject(new Error('index has to be 0 or greater'));
            }
            try {
                resolve(localStorage.key(index));
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Adds tha value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @returns {Promise<boolean>}
     */
    PromisableService.prototype.set = function (key, value, prefix) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                if (_this._allowNull
                    || (!_this._allowNull && value !== 'null' && value !== null && value !== undefined)) {
                    localStorage.setItem((prefix || _this._prefix) + "_" + key, value);
                }
                else {
                    return _this.remove(key, prefix);
                }
                resolve(true);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @returns {Promise<string | null>}
     */
    PromisableService.prototype.get = function (key, prefix) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                resolve(localStorage.getItem((prefix || _this._prefix) + "_" + key));
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @returns {Promise<boolean>}
     */
    PromisableService.prototype.remove = function (key, prefix) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                localStorage.removeItem((prefix || _this._prefix) + "_" + key);
                resolve(true);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    /**
     * Clears all entries of the applications local storage.
     * @returns {Promise<boolean>}
     */
    PromisableService.prototype.clear = function () {
        return new Promise(function (resolve, reject) {
            try {
                localStorage.clear();
                resolve(true);
            }
            catch (error) {
                reject(error);
            }
        });
    };
    return PromisableService;
}());

/**
 * Created by bohoffi on 04.04.2017.
 */
var getProperty = function (path, object) {
    return path.reduce(function (xs, x) { return (xs && xs[x]) ? xs[x] : null; }, object);
};
var setProperty = function (path, value, object) {
    var lastKeyIndex = path.length - 1;
    for (var i = 0; i < lastKeyIndex; ++i) {
        var key = path[i];
        if (!(key in object)) {
            object[key] = {};
        }
        object = object[key];
    }
    object[path[lastKeyIndex]] = value;
};
var defaultConfig = {
    allowNull: true,
    prefix: 'ngx_local_storage'
};

/**
 * Created by bohoffi on 03.04.2017.
 */
var LocalStorageService = (function () {
    function LocalStorageService(config) {
        if (config) {
            this._prefix = config.prefix || defaultConfig.prefix;
            this._allowNull = config.allowNull || defaultConfig.allowNull;
        }
        this._promisable = new PromisableService({
            allowNull: this._allowNull,
            prefix: this._prefix
        });
    }
    LocalStorageService.prototype.asPromisable = function () {
        return this._promisable;
    };
    /**
     * Gets the number of entries in the applications local storage.
     * @returns {Promise<number>}
     */
    LocalStorageService.prototype.count = function () {
        try {
            return localStorage.length;
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Returns the nth (defined by the index parameter) key in the storage.
     * The order of keys is user-agent defined, so you should not rely on it.
     * @param index   An integer representing the number of the key you want to get the name of. This is a zero-based index.
     * @returns {Promise<string | null>}
     */
    LocalStorageService.prototype.getKey = function (index) {
        if (index < 0) {
            console.error(new Error('index has to be 0 or greater'));
        }
        try {
            return localStorage.key(index);
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Adds tha value with the given key or updates an existing entry.
     * @param key     Key to store.
     * @param value   Value to store.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @returns {Promise<boolean>}
     */
    LocalStorageService.prototype.set = function (key, value, prefix) {
        if (this._allowNull
            || (!this._allowNull && value !== 'null' && value !== null && value !== undefined)) {
            localStorage.setItem((prefix || this._prefix) + "_" + key, value);
        }
        else {
            this.remove(key, prefix);
        }
    };
    /**
     * Gets the entry specified by the given key or null.
     * @param key     Key identifying the wanted entry.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @returns {Promise<string | null>}
     */
    LocalStorageService.prototype.get = function (key, prefix) {
        try {
            return localStorage.getItem((prefix || this._prefix) + "_" + key);
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Removes the entry specified by the given key.
     * @param key     Key identifying the entry to remove.
     * @param prefix  Optional prefix to overwrite the configured one.
     * @returns {Promise<boolean>}
     */
    LocalStorageService.prototype.remove = function (key, prefix) {
        try {
            localStorage.removeItem((prefix || this._prefix) + "_" + key);
        }
        catch (error) {
            console.error(error);
        }
    };
    /**
     * Clears all entries of the applications local storage.
     * @returns {Promise<boolean>}
     */
    LocalStorageService.prototype.clear = function () {
        try {
            localStorage.clear();
        }
        catch (error) {
            console.error(error);
        }
    };
    return LocalStorageService;
}());
LocalStorageService.decorators = [
    { type: _angular_core.Injectable },
];
/** @nocollapse */
LocalStorageService.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: _angular_core.Optional },] },
]; };

/**
 * Created by bohoffi on 04.04.2017.
 */

/**
 * Created by bohoffi on 03.04.2017.
 */
var LocalStorageDirective = (function () {
    function LocalStorageDirective(_element, _service) {
        this._element = _element;
        this._service = _service;
        this.lsDebounce = 0;
        this.lsInitFromStorage = false;
        this.lsStoredValue = new _angular_core.EventEmitter();
        this._valuePath = [];
    }
    LocalStorageDirective.prototype.ngAfterViewInit = function () {
        this._initKey();
        this._initFromStorage();
        this._hookEvent();
    };
    Object.defineProperty(LocalStorageDirective.prototype, "lsValuePath", {
        set: function (path) {
            if (path != null) {
                this._valuePath = Array.isArray(path) ? path : path.split(',');
            }
            else {
                this._valuePath = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    LocalStorageDirective.prototype._initKey = function () {
        if (!this.lsKey) {
            if (!this._element.nativeElement.id && !this._element.nativeElement.name) {
                throw new Error('No key or element id or name supplied!');
            }
            this.lsKey = this._element.nativeElement.id || this._element.nativeElement.name;
        }
    };
    LocalStorageDirective.prototype._hookEvent = function () {
        var _this = this;
        if (this.lsEvent) {
            this._eventSubscription = rxjs_Observable.Observable.fromEvent(this._element.nativeElement, this.lsEvent)
                .debounceTime(this.lsDebounce)
                .subscribe(function () {
                _this._service.asPromisable().set(_this.lsKey, getProperty(_this._valuePath.length ? _this._valuePath : ['value'], _this._element.nativeElement), _this.lsPrefix)
                    .then(function () {
                    _this._service.asPromisable().get(_this.lsKey, _this.lsPrefix)
                        .then(function (value) {
                        _this.lsStoredValue.emit(value);
                    })
                        .catch(function (err) { return console.error(err); });
                })
                    .catch(function (err) { return console.error(err); });
            });
        }
    };
    LocalStorageDirective.prototype._initFromStorage = function () {
        var _this = this;
        if (this.lsInitFromStorage) {
            this._service.asPromisable().get(this.lsKey, this.lsPrefix)
                .then(function (storedValue) {
                if (!!storedValue && typeof storedValue === 'string' && storedValue !== 'null') {
                    setProperty(_this._valuePath.length ? _this._valuePath : ['value'], storedValue, _this._element.nativeElement);
                }
            })
                .catch(function (err) { return console.error(err); });
        }
    };
    LocalStorageDirective.prototype.ngOnDestroy = function () {
        if (this._eventSubscription && !this._eventSubscription.closed) {
            this._eventSubscription.unsubscribe();
        }
    };
    return LocalStorageDirective;
}());
LocalStorageDirective.decorators = [
    { type: _angular_core.Directive, args: [{
                selector: '[ngxLocalStorage]'
            },] },
];
/** @nocollapse */
LocalStorageDirective.ctorParameters = function () { return [
    { type: _angular_core.ElementRef, },
    { type: LocalStorageService, },
]; };
LocalStorageDirective.propDecorators = {
    'lsKey': [{ type: _angular_core.Input, args: ['ngxLocalStorage',] },],
    'lsPrefix': [{ type: _angular_core.Input },],
    'lsEvent': [{ type: _angular_core.Input },],
    'lsDebounce': [{ type: _angular_core.Input },],
    'lsInitFromStorage': [{ type: _angular_core.Input },],
    'lsStoredValue': [{ type: _angular_core.Output },],
    'lsValuePath': [{ type: _angular_core.Input },],
};

/**
 * Created by bohoffi on 04.04.2017.
 */

function ngxLocalStorage(options) {
    return function (target, propertyDescription) {
        var service = new LocalStorageService({
            prefix: !!options && !!options.prefix ? options.prefix : ''
        });
        var key = !!options && !!options.key ? options.key : propertyDescription;
        Object.defineProperty(target, propertyDescription, {
            get: function () {
                return service.get(key);
            },
            set: function (value) {
                service.set(key, value);
            }
        });
    };
}

/**
 * Created by bohoffi on 03.04.2017.
 */
var ModuleConfigToken = new _angular_core.InjectionToken('moduleConfig');
function provideStorageService(moduleConfig) {
    return new LocalStorageService(moduleConfig);
}
var NgxLocalStorageModule = (function () {
    function NgxLocalStorageModule(parentModule) {
        if (parentModule) {
            throw new Error('NgxLocalStorageModule is already loaded. Import it in the AppModule only');
        }
    }
    NgxLocalStorageModule.forRoot = function (config) {
        return {
            ngModule: NgxLocalStorageModule,
            providers: [
                {
                    provide: ModuleConfigToken,
                    useValue: config
                },
                {
                    provide: LocalStorageService,
                    useFactory: provideStorageService,
                    deps: [
                        ModuleConfigToken
                    ]
                }
            ]
        };
    };
    return NgxLocalStorageModule;
}());
NgxLocalStorageModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                imports: [
                    _angular_common.CommonModule
                ],
                declarations: [
                    LocalStorageDirective
                ],
                exports: [
                    LocalStorageDirective
                ]
            },] },
];
/** @nocollapse */
NgxLocalStorageModule.ctorParameters = function () { return [
    { type: NgxLocalStorageModule, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.SkipSelf },] },
]; };

/**
 * Created by bohoffi on 03.04.2017.
 */

exports.ModuleConfigToken = ModuleConfigToken;
exports.provideStorageService = provideStorageService;
exports.NgxLocalStorageModule = NgxLocalStorageModule;
exports.LocalStorageService = LocalStorageService;
exports.ngxLocalStorage = ngxLocalStorage;

Object.defineProperty(exports, '__esModule', { value: true });

})));
